if (length(ts) == S){
K <- K[ts, ts]
g <- graph.adjacency(K, mode = "directed")
Cycles <- FALSE
} else {
Cycles <- TRUE
}
## Build the foodweb
fw <- list()
fw$links <- get.edgelist(g)
fw$S <- S
fw$L <- dim(fw$links)[1]
fw$C <- fw$L / (S * (S - 1) * 0.5)
fw$Model <- "From File"
fw$Cycles <- Cycles
fw$links
library(eyeball)
devtools::load_all(".")
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "~/BB/eyeball/Data/FoodWebs/weddell_488.txt", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.0)
M
plot(eigen(M)$values)
library(eyeball)
devtools::load_all(".")
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 10, C= 1,distribution.pairs = "Normal")
M
plot(eigen(M)$values)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 100, C= 1,distribution.pairs = "Normal")
plot(eigen(M)$values)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal")
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal")
plot(eigen(M)$values)
library(eyeball)
devtools::load_all(".")
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
?abline
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1, rhoxy = 0))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1, rhoxy = -0.5))
devtools::load_all(".")
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 3, sigmay = 1, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 1, rhoxy = -0.5))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 1, rhoxy = -0.5))
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 1, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 1, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 3.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 3.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 3.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 45.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -4, muy = 5.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
max(3,5,2)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 45.5, sigmax = 7, sigmay = 9, rhoxy = -0.5))
library(eyeball)
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 45.5, sigmax = 7, sigmay = 9, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 2.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
library(eyeball)
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 4.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 4.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 2.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 2.5, sigmax = 45, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 2.5, sigmax = 1.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 1.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 0.25, sigmax = 1.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.4, distribution.pairs = "Normal", mux = -1, muy = 0.25, sigmax = 1.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.4, distribution.pairs = "Normal", mux = -1, muy = 0.25, sigmax = 4.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.4, distribution.pairs = "Normal", mux = -1, muy = 0.25, sigmax = 4.5, sigmay = 2, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 500, C = 0.25, distribution.pairs = "FourCorners", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -1, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
library(eyeball)
devtools::load_all(".")
library(eyeball)
devtools::load_all(".")
Approx <- eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.25, foodweb.model = "Cascade"))
Approx
if (is.null(Approx$M.eigenvalues)){
Approx$M.eigenvalues <- eigen(Approx$M, only.values = TRUE, symmetric = FALSE)$values
}
## Data frame for the eigenvalues of M
ev <- data.frame(Real = Re(Approx$M.eigenvalues), Imaginary = Im(Approx$M.eigenvalues))
pl <- ggplot(ev, aes(Real, Imaginary)) + geom_point(alpha = 0.7) + theme_bw()
## Data frame for approximations
ev.polygon <- data.frame()
ev.extra <- data.frame()
## Circle and extra eigenvalue for May's stability criterion
st <- Approx$May.stats
radius <- sqrt((st$S - 1) * st$V)
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius, radius)
tmp$Type <- "May"
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "May"))
eye.ellipse.df <- function(centerx, radiusx, radiusy){
thetas <- seq(pi / 2.0, 0.0, length = 1000)
xbase <- radiusx * cos(thetas)
ybase <- radiusy * sin(thetas)
x <- c(xbase, rev(xbase), -xbase, rev(-xbase))
y <- c(ybase, rev(-ybase), -ybase, rev(ybase))
return(data.frame(Real = x + centerx, Imaginary = y))
}
ev <- data.frame(Real = Re(Approx$M.eigenvalues), Imaginary = Im(Approx$M.eigenvalues))
pl <- ggplot(ev, aes(Real, Imaginary)) + geom_point(alpha = 0.7) + theme_bw()
## Data frame for approximations
ev.polygon <- data.frame()
ev.extra <- data.frame()
## Circle and extra eigenvalue for May's stability criterion
st <- Approx$May.stats
radius <- sqrt((st$S - 1) * st$V)
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius, radius)
tmp$Type <- "May"
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "May"))
## Ellipse and extra eigenvalue for Tang et al. criteria
st <- Approx$TangEtAl.stats
radius.h <- sqrt((st$S - 1) * st$V * (1 + st$rho))
radius.v <- sqrt((st$S - 1) * st$V * (1 - st$rho))
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius.h, radius.v)
tmp$Type <- "Tang et al."
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "Tang et al."))
pl
pl + geom_polygon(data = ev.polygon, aes(Real, Imaginary, colour = Type), fill = NA)
pl + geom_polygon(data = ev.polygon, aes(Real, Imaginary, colour = Type), fill = NA)
st <- Approx$eyeball.stats
st
st <- Approx$eyeball.stats
tmp <- eye.ellipse.df(center.A, radius.A, radius.A)
tmp$Type <- "eyeball, A"
st <- Approx$eyeball.stats
tmp <- eye.ellipse.df(center.A, radius.A, radius.A)
st <- Approx$eyeball.stats
tmp <- eye.ellipse.df(st$center.A, st$radius.A, st$radius.A)
tmp$Type <- "eyeball, A"
ev.polygon <- rbind(ev.polygon, tmp)
tmp <- eye.ellipse.df(st$radius.A + st$center.A, st$radius.B.h, st$radius.B.v)
tmp$Type <- "eyeball, B"
ev.polygon <- rbind(ev.polygon, tmp)
pl <- pl + geom_polygon(data = ev.polygon, aes(Real, Imaginary, colour = Type), fill = NA)
pl
pl + geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 3)
pl + geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 4)
pl + geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 2)
pl + geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 1)
pl + geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 1, size = 1)
pl + geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 1, size = 1.25)
pl + geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 1, size = 1.25)
only.bulk <- FALSE
if (is.null(Approx$M.eigenvalues)){
Approx$M.eigenvalues <- eigen(Approx$M, only.values = TRUE, symmetric = FALSE)$values
}
## Data frame for the eigenvalues of M
ev <- data.frame(Real = Re(Approx$M.eigenvalues), Imaginary = Im(Approx$M.eigenvalues))
pl <- ggplot(ev, aes(Real, Imaginary)) + geom_point(alpha = 0.7) + theme_bw()
## Data frame for approximations
ev.polygon <- data.frame()
ev.extra <- data.frame()
## Circle and extra eigenvalue for May's stability criterion
st <- Approx$May.stats
radius <- sqrt((st$S - 1) * st$V)
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius, radius)
tmp$Type <- "May"
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "May"))
## Ellipse and extra eigenvalue for Tang et al. criteria
st <- Approx$TangEtAl.stats
radius.h <- sqrt((st$S - 1) * st$V * (1 + st$rho))
radius.v <- sqrt((st$S - 1) * st$V * (1 - st$rho))
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius.h, radius.v)
tmp$Type <- "Tang et al."
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "Tang et al."))
## Circle and Ellipse for eyeball approximation
st <- Approx$eyeball.stats
tmp <- eye.ellipse.df(st$center.A, st$radius.A, st$radius.A)
tmp$Type <- "eyeball, A"
ev.polygon <- rbind(ev.polygon, tmp)
tmp <- eye.ellipse.df(st$radius.A + st$center.A, st$radius.B.h, st$radius.B.v)
tmp$Type <- "eyeball, B"
ev.polygon <- rbind(ev.polygon, tmp)
## Now draw the eigenvalues and the approximations
pl <- pl + geom_polygon(data = ev.polygon, aes(Real, Imaginary, colour = Type), fill = NA) +
geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 1, size = 1.25)
## and cut the plot
if (only.bulk == FALSE) {
pl <- pl + coord_cartesian(xlim = 1.1 * range(Re(Approx$M.eigenvalues)),
ylim = 1.1 * range(Im(Approx$M.eigenvalues)))
}
pl
## Check if the eigenvalues of M have been computed already
if (is.null(Approx$M.eigenvalues)){
Approx$M.eigenvalues <- eigen(Approx$M, only.values = TRUE, symmetric = FALSE)$values
}
## Data frame for the eigenvalues of M
ev <- data.frame(Real = Re(Approx$M.eigenvalues), Imaginary = Im(Approx$M.eigenvalues))
pl <- ggplot(ev, aes(Real, Imaginary)) + geom_point(alpha = 0.7) + theme_bw()
## Data frame for approximations
ev.polygon <- data.frame()
ev.extra <- data.frame()
## Circle and extra eigenvalue for May's stability criterion
st <- Approx$May.stats
radius <- sqrt((st$S - 1) * st$V)
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius, radius)
tmp$Type <- "May"
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "May"))
## Ellipse and extra eigenvalue for Tang et al. criteria
st <- Approx$TangEtAl.stats
radius.h <- sqrt((st$S - 1) * st$V * (1 + st$rho))
radius.v <- sqrt((st$S - 1) * st$V * (1 - st$rho))
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius.h, radius.v)
tmp$Type <- "Tang et al."
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "Tang et al."))
## Circle and Ellipse for eyeball approximation
st <- Approx$eyeball.stats
tmp <- eye.ellipse.df(st$center.A, st$radius.A, st$radius.A)
tmp$Type <- "eyeball, A"
ev.polygon <- rbind(ev.polygon, tmp)
tmp <- eye.ellipse.df(st$radius.A + st$center.A, st$radius.B.h, st$radius.B.v)
tmp$Type <- "eyeball, shifted B"
ev.polygon <- rbind(ev.polygon, tmp)
## Now draw the eigenvalues and the approximations
pl <- pl + geom_polygon(data = ev.polygon, aes(Real, Imaginary, colour = Type), fill = NA) +
geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 1, size = 1.25)
## and cut the plot
if (only.bulk == FALSE) {
pl <- pl + coord_cartesian(xlim = 1.25 * range(Re(Approx$M.eigenvalues)),
ylim = 1.25 * range(Im(Approx$M.eigenvalues)))
}
pl
only.bulk <- TRUE
## Check if the eigenvalues of M have been computed already
if (is.null(Approx$M.eigenvalues)){
Approx$M.eigenvalues <- eigen(Approx$M, only.values = TRUE, symmetric = FALSE)$values
}
## Data frame for the eigenvalues of M
ev <- data.frame(Real = Re(Approx$M.eigenvalues), Imaginary = Im(Approx$M.eigenvalues))
pl <- ggplot(ev, aes(Real, Imaginary)) + geom_point(alpha = 0.7) + theme_bw()
## Data frame for approximations
ev.polygon <- data.frame()
ev.extra <- data.frame()
## Circle and extra eigenvalue for May's stability criterion
st <- Approx$May.stats
radius <- sqrt((st$S - 1) * st$V)
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius, radius)
tmp$Type <- "May"
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "May"))
## Ellipse and extra eigenvalue for Tang et al. criteria
st <- Approx$TangEtAl.stats
radius.h <- sqrt((st$S - 1) * st$V * (1 + st$rho))
radius.v <- sqrt((st$S - 1) * st$V * (1 - st$rho))
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius.h, radius.v)
tmp$Type <- "Tang et al."
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "Tang et al."))
## For cutting the graph
bulkRe <- range(ev.polygon$Real)
bulkIm <- range(ev.polygon$Imaginary)
## Circle and Ellipse for eyeball approximation
st <- Approx$eyeball.stats
tmp <- eye.ellipse.df(st$center.A, st$radius.A, st$radius.A)
tmp$Type <- "eyeball, A"
ev.polygon <- rbind(ev.polygon, tmp)
tmp <- eye.ellipse.df(st$radius.A + st$center.A, st$radius.B.h, st$radius.B.v)
tmp$Type <- "eyeball, shifted B"
ev.polygon <- rbind(ev.polygon, tmp)
## Now draw the eigenvalues and the approximations
pl <- pl + geom_polygon(data = ev.polygon, aes(Real, Imaginary, colour = Type), fill = NA) +
geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 1, size = 1.25)
## and cut the plot
if (only.bulk == FALSE) {
pl <- pl + coord_cartesian(xlim = 1.25 * range(Re(Approx$M.eigenvalues)),
ylim = 1.25 * range(Im(Approx$M.eigenvalues)))
}
else {
## Cut according to the polygons
pl <- pl + coord_cartesian(xlim = 1.05 * range(ev.polygon$bulkRe),
ylim = 1.05 * range(ev.polygon$bulkIm))
}
## Check if the eigenvalues of M have been computed already
if (is.null(Approx$M.eigenvalues)){
Approx$M.eigenvalues <- eigen(Approx$M, only.values = TRUE, symmetric = FALSE)$values
}
## Data frame for the eigenvalues of M
ev <- data.frame(Real = Re(Approx$M.eigenvalues), Imaginary = Im(Approx$M.eigenvalues))
pl <- ggplot(ev, aes(Real, Imaginary)) + geom_point(alpha = 0.7) + theme_bw()
## Data frame for approximations
ev.polygon <- data.frame()
ev.extra <- data.frame()
## Circle and extra eigenvalue for May's stability criterion
st <- Approx$May.stats
radius <- sqrt((st$S - 1) * st$V)
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius, radius)
tmp$Type <- "May"
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "May"))
## Ellipse and extra eigenvalue for Tang et al. criteria
st <- Approx$TangEtAl.stats
radius.h <- sqrt((st$S - 1) * st$V * (1 + st$rho))
radius.v <- sqrt((st$S - 1) * st$V * (1 - st$rho))
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius.h, radius.v)
tmp$Type <- "Tang et al."
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "Tang et al."))
## For cutting the graph
bulkRe <- range(ev.polygon$Real)
bulkIm <- range(ev.polygon$Imaginary)
## Circle and Ellipse for eyeball approximation
st <- Approx$eyeball.stats
tmp <- eye.ellipse.df(st$center.A, st$radius.A, st$radius.A)
tmp$Type <- "eyeball, A"
ev.polygon <- rbind(ev.polygon, tmp)
tmp <- eye.ellipse.df(st$radius.A + st$center.A, st$radius.B.h, st$radius.B.v)
tmp$Type <- "eyeball, shifted B"
ev.polygon <- rbind(ev.polygon, tmp)
## Now draw the eigenvalues and the approximations
pl <- pl + geom_polygon(data = ev.polygon, aes(Real, Imaginary, colour = Type), fill = NA) +
geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 1, size = 1.25)
## and cut the plot
if (only.bulk == FALSE) {
pl <- pl + coord_cartesian(xlim = 1.25 * range(Re(Approx$M.eigenvalues)),
ylim = 1.25 * range(Im(Approx$M.eigenvalues)))
} else {
## Cut according to the polygons
pl <- pl + coord_cartesian(xlim = 1.05 * range(ev.polygon$bulkRe),
ylim = 1.05 * range(ev.polygon$bulkIm))
}
bulkIm
bulkRe
## Check if the eigenvalues of M have been computed already
if (is.null(Approx$M.eigenvalues)){
Approx$M.eigenvalues <- eigen(Approx$M, only.values = TRUE, symmetric = FALSE)$values
}
## Data frame for the eigenvalues of M
ev <- data.frame(Real = Re(Approx$M.eigenvalues), Imaginary = Im(Approx$M.eigenvalues))
pl <- ggplot(ev, aes(Real, Imaginary)) + geom_point(alpha = 0.7) + theme_bw()
## Data frame for approximations
ev.polygon <- data.frame()
ev.extra <- data.frame()
## Circle and extra eigenvalue for May's stability criterion
st <- Approx$May.stats
radius <- sqrt((st$S - 1) * st$V)
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius, radius)
tmp$Type <- "May"
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "May"))
## Ellipse and extra eigenvalue for Tang et al. criteria
st <- Approx$TangEtAl.stats
radius.h <- sqrt((st$S - 1) * st$V * (1 + st$rho))
radius.v <- sqrt((st$S - 1) * st$V * (1 - st$rho))
center <- st$d - st$E
tmp <- eye.ellipse.df(center, radius.h, radius.v)
tmp$Type <- "Tang et al."
ev.polygon <- rbind(ev.polygon, tmp)
ev.extra <- rbind(ev.extra, data.frame(Real = (st$S-1) * st$E + st$d, Imaginary = 0, Type = "Tang et al."))
## For cutting the graph
bulkRe <- range(ev.polygon$Real)
bulkIm <- range(ev.polygon$Imaginary)
## Circle and Ellipse for eyeball approximation
st <- Approx$eyeball.stats
tmp <- eye.ellipse.df(st$center.A, st$radius.A, st$radius.A)
tmp$Type <- "eyeball, A"
ev.polygon <- rbind(ev.polygon, tmp)
tmp <- eye.ellipse.df(st$radius.A + st$center.A, st$radius.B.h, st$radius.B.v)
tmp$Type <- "eyeball, shifted B"
ev.polygon <- rbind(ev.polygon, tmp)
## Now draw the eigenvalues and the approximations
pl <- pl + geom_polygon(data = ev.polygon, aes(Real, Imaginary, colour = Type), fill = NA) +
geom_point(data = ev.extra, aes(Real, Imaginary, colour = Type), shape = 1, size = 1.25)
## and cut the plot
if (only.bulk == FALSE) {
pl <- pl + coord_cartesian(xlim = 1.25 * range(Re(Approx$M.eigenvalues)),
ylim = 1.25 * range(Im(Approx$M.eigenvalues)))
} else {
## Cut according to the polygons
pl <- pl + coord_cartesian(xlim = 1.05 * bulkRe,
ylim = 1.05 * bulkIm)
}
pl
devtools::load_all(".")
library(eyeball)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner")))
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade")))
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade")), only.bulk = TRUE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.1)), only.bulk = TRUE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.1, mux = 0.1)), only.bulk = TRUE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.1, mux = -0.1)), only.bulk = TRUE)
devtools::load_all(".")
library(eyeball)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.1, mux = -0.1)), only.bulk = TRUE)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.1, mux = -0.1)), only.bulk = TRUE)
devtools::load_all(".")
library(eyeball)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.09, mux = -0.1)), only.bulk = TRUE)
library(eyeball)
library(eyeball)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.09, mux = -0.1)), only.bulk = TRUE)
library(eyeball)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.09, mux = -0.1)), only.bulk = TRUE)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.09, mux = -0.1)), only.bulk = TRUE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 1000, distribution.pairs = "FourCorner", foodweb.model = "Cascade", muy = 0.07, mux = -0.1)), only.bulk = TRUE)
library(eyeball)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 1)))
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 1, foodweb.model = "Cascade")))
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 1, foodweb.model = "Cascade")), only.bulk = TRUE)
devtools::load_all(".")
library(eyeball)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 1, foodweb.model = "Cascade")), only.bulk = TRUE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 1, foodweb.model = "Cascade")), only.bulk = FALSE)
devtools::load_all(".")
library(eyeball)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 1)), only.bulk = FALSE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.25)), only.bulk = FALSE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = FALSE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = TRUE)
library(eyeball)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = TRUE)
devtools::load_all(".")
library(eyeball)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = TRUE)
library(eyeball)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = TRUE)
library(eyeball)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = TRUE)
devtools::load_all(".")
library(eyeball)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = TRUE)
library(eyeball)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = TRUE)
library(eyeball)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = TRUE)
library(eyeball)
devtools::load_all(".")
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15)), only.bulk = TRUE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15, muy = 5)), only.bulk = TRUE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15, muy = 5)), only.bulk = FALSE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15, sigmax = 23)), only.bulk = FALSE)
eye.plot.approximations(eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(S = 500, C = 0.15, sigmax = 23, sigmay = 48)), only.bulk = FALSE)
