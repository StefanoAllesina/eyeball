foodweb.cascade(10, 0.5)
foodweb.cascade(10, 0.5)
foodweb.cascade(10, 0.5)
foodweb.cascade(10, 0.5)
foodweb.cascade(5, 0.5)
foodweb.cascade(5, 0.5)
foodweb.cascade(5, 0.5)
foodweb.cascade(5, 0.5)
foodweb.cascade(5, 0.5)
foodweb.cascade(5, 0.5)
foodweb.cascade(5, 0.5)
foodweb.cascade(5, 0.5)
foodweb.cascade(5, 0.5)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.01)
foodweb.cascade(5, 0.01)
foodweb.cascade(5, 0.01)
foodweb.cascade(5, 0.01)
devtools::load_all(".")
foodweb.cascade(5, 0.01)
devtools::load_all(".")
foodweb.cascade(5, 0.01)
foodweb.cascade(5, 0.01)
devtools::load_all(".")
library(eyeball)
foodweb.cascade(5, 0.01)
foodweb.cascade(5, 0.01)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
foodweb.cascade(5, 0.1)
clusters(g)
is.connected(g)
devtools::load_all(".")
library(eyeball)
foodweb.cascade(5, 0.01)
devtools::load_all(".")
foodweb.cascade(5, 0.01)
warnings()
foodweb.cascade(5, 0.7)
foodweb.cascade(5, 0.7)
g <- barabasi.game(20)
topological.sort(g)
get.edgelist(g)
devtools::load_all(".")
fw <- foodweb.cascade(40, 0.2)
fw
devtools::load_all(".")
library(eyeball)
devtools::load_all(".")
foodweb.cascade(40, 0.2)
devtools::load_all(".")
devtools::load_all(".")
library("eyeball", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
devtools::load_all(".")
library(eyeball)
library("eyeball", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("roxygen2")
devtools::load_all(".")
?foodweb.cascade
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
foodweb.niche(100, 0.2)
foodweb.niche(100, 0.2)
library(eyeball)
foodweb.niche(100, 0.2)
devtools::load_all(".")
foodweb.niche(100, 0.2)
FW <- foodweb.niche(100, 0.2)
warnings()
FW <- foodweb.niche(100, 0.2)
FW <- foodweb.niche(100, 0.2)
FW <- foodweb.niche(100, 0.5)
FW <- foodweb.niche(100, 0.5)
library(eyeball)
devtools::load_all(".")
FW <- foodweb.niche(100, 0.5)
FW <- foodweb.niche(100, 0.1)
FW <- foodweb.niche(100, 0.1)
devtools::load_all(".")
FW <- foodweb.niche(100, 0.1)
g <- graph.edgelist(FW$links)
plot(g)
clusters(g)
clusters(g)$csize
FW <- foodweb.niche(100, 0.25)
g <- graph.edgelist(FW$links)
clusters(g)$csize
FW <- foodweb.niche(100, 0.75)
g <- graph.edgelist(FW$links)
clusters(g)$csize
FW <- foodweb.niche(100, 0.75)
FW <- foodweb.niche(100, 0.25)
FW <- foodweb.niche(100, 0.25)
g <- graph.edgelist(FW$links)
clusters(g)$csize
FW <- foodweb.niche(20, 0.25)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(30, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
library(eyeball)
devtools::load_all(".")
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
library(eyeball)
devtools::load_all(".")
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(20, 0.35)
FW <- foodweb.niche(100, 0.25)
library(eyeball)
devtools::load_all(".")
FW <- foodweb.niche(100, 0.25)
library(eyeball)
devtools::load_all(".")
FW <- foodweb.niche(100, 0.25)
FW <- foodweb.niche(100, 0.25)
FW <- foodweb.niche(100, 0.25)
FW
erdos.renyi.game(n = 100, p.or.m = 0.2,directed = TRUE)
g <- erdos.renyi.game(n = 100, p.or.m = 0.2,directed = TRUE)
clusters(g)
g <- erdos.renyi.game(n = 100, p.or.m = 0.6,directed = TRUE)
clusters(g)
image(get.adjacency(g))
image(as.martix(get.adjacency(g)))
image(as.matrix(get.adjacency(g)))
topological.sort(g)
g <- erdos.renyi.game(n = 100, p.or.m = 0.1,directed = TRUE)
topological.sort(g)
g <- erdos.renyi.game(n = 100, p.or.m = 0.05,directed = TRUE)
topological.sort(g)
g <- erdos.renyi.game(n = 100, p.or.m = 0.025,directed = TRUE)
topological.sort(g)
library(eyeball)
devtools::load_all(".")
FW <- foodweb.niche(100, 0.25)
FW
FW
FW
FW <- foodweb.niche(100, 0.25)
FW
library(eyeball)
devtools::load_all(".")
FW <- foodweb.niche(100, 0.25)
FW
FW
FW <- foodweb.niche(100, 0.25)
foodweb.niche(100, 0.25)
foodweb.niche(100, 0.25)
foodweb.niche(100, 0.25)
foodweb.niche(100, 0.25)
library(eyeball)
devtools::load_all(".")
devtools::load_all(".")
?foodweb.cascade
library(eyeball)
devtools::load_all(".")
devtools::load_all(".")
load(eyeball)
require(eyeball)
library("eyeball", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
library(eyeball)
devtools::load_all(".")
library(eyeball)
devtools::load_all(".")
FW <- foodweb.cascade
FW <- foodweb.cascade()
require(igraph)
library(eyeball)
foodweb.cascade
FW <- foodweb.cascade()
FW
library(eyeball)
devtools::load_all(".")
FW <- foodweb.cascade()
library("eyeball", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
require(igraph)
source('~/OldDisk/Code/Persistence/ChaosTestRealData/TestChaos.R')
message("ABC", "DEF")
?sample
library(eyeball)
devtools::load_all(".")
pairs.from.empirical(100, matrix(runif(20),10,2))
pairs.from.empirical(100, matrix(runif(20),10,5))
library(eyeball)
devtools::load_all(".")
?pairs.from.empirical
?pairs.from.normal
pairs
?pairs
?pairs.from.normal
library(eyeball)
devtools::load_all(".")
?pairs.from.normal
?get.pairs.from.normal
eye
library(eyeball)
devtools::load_all(".")
?eye.foodweb.cascade
FW <- eye.foodweb.cascade(S = 100, C = 0.25)
devtools::load_all(".")
library(eyeball)
devtools::load_all(".")
FW <- eye.foodweb.cascade(S = 100, C = 0.25)
require(igraph)
FW <- eye.foodweb.cascade(S = 100, C = 0.25)
FW <- eye.foodweb.cascade(S = 100, C = 0.25)
FW
z <- "Normal"
is.matrix(z)
FW
mux <- -1
muy <- 0.5
sigmax <- 1/4
sigmay <- 1/4
rhoxy <- -2/3
rhoxy
FW <- eye.foodweb.cascade(S = 10, C = 0.25)
FW
distribution.pairs  <- "Normal"
S <- FW$S
M <- matrix(0, S, S)
NumPairs <- FW$L
if (is.matrix(distribution.pairs) == TRUE){
my.pairs <- eye.pairs.from.empirical(NumPairs = NumPairs,
Empirical.Distribution = distribution.pairs)
} else {
if (distribution.pairs == "Normal"){
my.pairs <- eye.pairs.from.normal(NumPairs = NumPairs,
mux = mux,
muy = muy,
sigmax = sigmax,
sigmay = sigmay,
rhoxy = rhoxy)
}
if (distribution.pairs == "Normal"){
my.pairs <- eye.pairs.from.normal(NumPairs = NumPairs,
mux = mux,
muy = muy,
sigmax = sigmax,
sigmay = sigmay,
rhoxy = rhoxy)
}
}
require(MASS)
S <- FW$S
M <- matrix(0, S, S)
NumPairs <- FW$L
if (is.matrix(distribution.pairs) == TRUE){
my.pairs <- eye.pairs.from.empirical(NumPairs = NumPairs,
Empirical.Distribution = distribution.pairs)
} else {
if (distribution.pairs == "Normal"){
my.pairs <- eye.pairs.from.normal(NumPairs = NumPairs,
mux = mux,
muy = muy,
sigmax = sigmax,
sigmay = sigmay,
rhoxy = rhoxy)
}
if (distribution.pairs == "Normal"){
my.pairs <- eye.pairs.from.normal(NumPairs = NumPairs,
mux = mux,
muy = muy,
sigmax = sigmax,
sigmay = sigmay,
rhoxy = rhoxy)
}
}
my.pairs
FW$links
M[FW$links]
M[FW$links] <- my.pairs[,1]
M
M[FW$links[2:1]] <- my.pairs[,2]
M[FW$links[,2:1]] <- my.pairs[,2]
M
M[FW$links] <- my.pairs[,1]
?rnorm
library(eyeball)
devtools::load_all(".")
devtools::load_all(".")
eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.1)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.1)
plot(eigen(M)$values)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.1)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.5)
plot(eigen(M)$values)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.1)
plot(eigen(M)$values)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.0)
plot(eigen(M)$values)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "~/BB/eyeball/Data/FoodWebs/weddell_488.txt", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.0)
library(eyeball)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "~/BB/eyeball/Data/FoodWebs/weddell_488.txt", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.0)
devtools::load_all(".")
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "~/BB/eyeball/Data/FoodWebs/weddell_488.txt", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.0)
devtools::load_all(".")
library(eyeball)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "~/BB/eyeball/Data/FoodWebs/weddell_488.txt", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.0)
eye.foodweb.file("~/BB/eyeball/Data/FoodWebs/weddell_488.txt")
eye.foodweb.file("~/BB/eyeball/Data/FoodWebs/stmarks_143.txt")
filename <- "~/BB/eyeball//Data//FoodWebs/stmarks_143.txt"
K <- (as.matrix(read.table(filename)) > 0) * 1
names(K)
colnames(K)
K <- (as.matrix(read.table(filename, header = FALSE)) > 0) * 1
colnames(K)
K <- (as.matrix(read.table(filename, header = FALSE)) > 0) * 1
colnames(K) <- NULL
rownames(K) <- NULL
S <- dim(K)[1]
K <- (as.matrix(read.table(filename, header = FALSE)) > 0) * 1
colnames(K) <- NULL
rownames(K) <- NULL
S <- dim(K)[1]
diag(K) <- 0
## Check double arrows
KK <- K + t(K)
KK[upper.tri(KK)] <- 0
KK <- (KK == 2) * 1
K <- K - KK
g <- graph.adjacency(K, mode = "directed")
## Check if it has no cycles. If so, perform a topological sort
ts <- topological.sort(g)
if (length(ts) == S){
K <- K[ts, ts]
g <- graph.adjacency(K, mode = "directed")
Cycles <- FALSE
} else {
Cycles <- TRUE
}
## Build the foodweb
fw <- list()
fw$links <- get.edgelist(g)
fw$S <- S
fw$L <- dim(fw$links)[1]
fw$C <- fw$L / (S * (S - 1) * 0.5)
fw$Model <- "From File"
fw$Cycles <- Cycles
fw$links
library(eyeball)
devtools::load_all(".")
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "~/BB/eyeball/Data/FoodWebs/weddell_488.txt", S = 100, C = 0.1, distribution.pairs = "Normal",mux = -1, muy = 0.25, sigmax = 0.1, sigmay = 0.05,rhoxy = -2/3,mu.diagonal = -1, sigma.diagonal = 0.0)
M
plot(eigen(M)$values)
library(eyeball)
devtools::load_all(".")
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 10, C= 1,distribution.pairs = "Normal")
M
plot(eigen(M)$values)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 100, C= 1,distribution.pairs = "Normal")
plot(eigen(M)$values)
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal")
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal")
plot(eigen(M)$values)
library(eyeball)
devtools::load_all(".")
M <- eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
?abline
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal"))
eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1, rhoxy = 0))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1, rhoxy = -0.5))
devtools::load_all(".")
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 1, sigmay = 1, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = 0, muy = 0, sigmax = 3, sigmay = 1, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 1, rhoxy = -0.5))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 1, rhoxy = -0.5))
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 1, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 1, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 3.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 3.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 3.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
devtools::load_all(".")
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 45.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -4, muy = 5.5, sigmax = 0.01, sigmay = 0.01, rhoxy = -0.5))
max(3,5,2)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 45.5, sigmax = 7, sigmay = 9, rhoxy = -0.5))
library(eyeball)
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 45.5, sigmax = 7, sigmay = 9, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 3, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 2.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
library(eyeball)
library(eyeball)
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 1, distribution.pairs = "Normal", mux = -1, muy = 4.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 4.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 2.5, sigmax = 5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 2.5, sigmax = 45, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 2.5, sigmax = 1.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 0.5, sigmax = 1.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.1, distribution.pairs = "Normal", mux = -1, muy = 0.25, sigmax = 1.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.4, distribution.pairs = "Normal", mux = -1, muy = 0.25, sigmax = 1.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.4, distribution.pairs = "Normal", mux = -1, muy = 0.25, sigmax = 4.5, sigmay = 2, rhoxy = -0.5))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade",S = 500, C= 0.4, distribution.pairs = "Normal", mux = -1, muy = 0.25, sigmax = 4.5, sigmay = 2, rhoxy = -0.5))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 500, C = 0.25, distribution.pairs = "FourCorners", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
library(eyeball)
devtools::load_all(".")
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Niche", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -5, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
eye.approximate.ReL1(eye.buildfoodweb.and.parameterize.M(foodweb.model = "Cascade", S = 500, C = 0.25, distribution.pairs = "FourCorner", mux = -1, muy = 2, sigmax = 3, sigmay = 2, rhoxy = -2/3))
